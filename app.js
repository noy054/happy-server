const express = require("express");
const morgan = require("morgan");
const cors = require("cors");
const bodyParser = require("body-parser");

const AppError = require("./src/utils/appError");
const globalErrorHandler = require("./src/controllers/errorController");
const mainListRouter = require("./src/routes/mainListRout");
const arrivalsListRouter = require("./src/routes/arrivalsListRoute");
const twilioRouter = require("./src/routes/twilioRoute");
const basketsNumberRoute = require("./src/routes/basketsNumberRoute");
const testRoute = require("./src/routes/testRoute");
const {
  makeNewArrivalCustomer,
} = require("./src/controllers/twilioController");

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));

// 1) MIDDLEWARES
if (process.env.NODE_ENV === "development") {
  app.use(morgan("dev"));
}

app.use(express.json());
app.use(cors());

app.use(express.static(`${__dirname}/public`));

const allowedOrigins = ["http://localhost:3001"];

app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS"));
      }
    },
  })
);

app.use((req, res, next) => {
  req.requestTime = new Date().toISOString();
  next();
});

// 3) ROUTES
app.use("/main", mainListRouter);
app.use("/arrivals", arrivalsListRouter);
app.use("/sendMessage", twilioRouter);
app.use("/test", testRoute);
app.use("/basketsNumber", basketsNumberRoute);
// app.use("/get-context", twilioRouter)

app.post("/webhook", async (req, res) => {
  try {
    const event = req.body; // Assuming the incoming message details are in the request body

    // Call makeNewArrivalCustomer function with context and event data
    const response = await makeNewArrivalCustomer(event);
    console.log("mskdmksm");
    // Respond with TwiML generated by makeNewArrivalCustomer function
    res.set("Content-Type", "text/xml");
    res.send(response);
  } catch (err) {
    console.error("Error handling incoming message:", err);
    res.status(500).send("Error handling incoming message");
  }
});

app.all("*", (req, res, next) => {
  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));
});

app.use(globalErrorHandler);

module.exports = app;
